name: Version Check

on:
  workflow_call:
    outputs:
      version-changed:
        description: "Whether the version has changed"
        value: ${{ jobs.check-version.outputs.version-changed }}
      current-version:
        description: "Current version from pubspec.yaml"
        value: ${{ jobs.check-version.outputs.current-version }}
      should-build:
        description: "Whether builds should proceed"
        value: ${{ jobs.check-version.outputs.should-build }}

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      current-version: ${{ steps.version-check.outputs.version }}
      should-build: ${{ steps.version-check.outputs.should-build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version change
        id: version-check
        run: |
          # Function to extract version from pubspec.yaml
          get_version() {
            grep '^version:' pubspec.yaml | sed 's/version: *//' | tr -d ' '
          }

          # Get current version
          CURRENT_VERSION=$(get_version)
          echo "Current version: $CURRENT_VERSION"

          # Default values
          SHOULD_BUILD="false"
          VERSION_CHANGED="false"

          # Handle different trigger scenarios
          case "${{ github.event_name }}" in
            "workflow_dispatch")
              echo "Manual trigger - forcing build"
              SHOULD_BUILD="true"
              VERSION_CHANGED="true"
              ;;
            "push")
              if [[ "${{ github.ref }}" == refs/tags/* ]]; then
                echo "Tag push - forcing build"
                SHOULD_BUILD="true"
                VERSION_CHANGED="true"
              else
                # Check if pubspec.yaml was modified in this push
                if git diff --name-only HEAD~1 HEAD | grep -q "pubspec.yaml"; then
                  echo "pubspec.yaml was modified in this push"

                  # Get previous version
                  PREVIOUS_VERSION=$(git show HEAD~1:pubspec.yaml | grep '^version:' | sed 's/version: *//' | tr -d ' ' || echo "0.0.0")
                  echo "Previous version: $PREVIOUS_VERSION"

                  if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
                    echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
                    VERSION_CHANGED="true"
                    SHOULD_BUILD="true"
                  else
                    echo "⏭️ Version unchanged ($CURRENT_VERSION)"
                    SHOULD_BUILD="false"
                  fi
                else
                  echo "⏭️ pubspec.yaml not modified - skipping build"
                  SHOULD_BUILD="false"
                fi
              fi
              ;;
            "pull_request")
              # For PRs, check if version will change
              if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "pubspec.yaml"; then
                echo "pubspec.yaml modified in PR"

                # Get base version
                BASE_VERSION=$(git show origin/${{ github.base_ref }}:pubspec.yaml | grep '^version:' | sed 's/version: *//' | tr -d ' ' || echo "0.0.0")
                echo "Base version: $BASE_VERSION"

                if [ "$CURRENT_VERSION" != "$BASE_VERSION" ]; then
                  echo "✅ PR will change version from $BASE_VERSION to $CURRENT_VERSION"
                  VERSION_CHANGED="true"
                  SHOULD_BUILD="true"
                else
                  echo "⏭️ PR doesn't change version"
                  SHOULD_BUILD="false"
                fi
              else
                echo "⏭️ pubspec.yaml not modified in PR - skipping build"
                SHOULD_BUILD="false"
              fi
              ;;
            *)
              echo "Unknown event type - forcing build"
              SHOULD_BUILD="true"
              VERSION_CHANGED="true"
              ;;
          esac

          # Validate version format
          if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(\+[0-9]+)?$ ]]; then
            echo "⚠️ Warning: Version format may be invalid: $CURRENT_VERSION"
            echo "Expected format: MAJOR.MINOR.PATCH+BUILD (e.g., 1.0.0+1)"
          fi

          # Set outputs
          echo "changed=$VERSION_CHANGED" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "should-build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

          # Summary
          echo "## Version Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Current Version**: \`$CURRENT_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Changed**: $VERSION_CHANGED" >> $GITHUB_STEP_SUMMARY
          echo "- **Should Build**: $SHOULD_BUILD" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

      - name: Create version badge
        if: steps.version-check.outputs.should-build == 'true'
        run: |
          VERSION="${{ steps.version-check.outputs.version }}"
          echo "Creating build for version: $VERSION"

          # You could extend this to create/update version badges
          # or perform additional version-related tasks
